#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Програма для роботи з файлами студентів.
Реалізовано читання, запис, дозапис, пошук файлів та даних, сортування за середнім балом.
"""

import os
import re
import csv
from typing import List, Dict, Tuple

# Шлях до директорії з файлами груп (за замовчуванням)
КАТАЛОГ_ДАНИХ = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'students_data')

def читати_файл_групи(назва_групи: str, каталог_даних: str = КАТАЛОГ_ДАНИХ) -> List[Tuple[str, float]]:
    """
    Читає дані з файлу групи використовуючи модуль csv.
    
    Args:
        назва_групи: Назва групи
        каталог_даних: Шлях до каталогу з файлами груп
        
    Returns:
        Список кортежів (ім'я студента, середній бал)
    """
    шлях_до_файлу = os.path.join(каталог_даних, f"{назва_групи}.txt")
    студенти = []
    
    try:
        # Відкриття файлу
        файл = open(шлях_до_файлу, 'r', encoding='utf-8')
        
        # Використання csv.reader з розділювачем ':'
        читач = csv.reader(файл, delimiter=":")
        
        # Читання даних з файлу
        for рядок in читач:
            if len(рядок) == 2:  # Перевірка, що рядок має два елементи
                ім_я = рядок[0]
                try:
                    середній_бал = float(рядок[1])
                    студенти.append((ім_я, середній_бал))
                except ValueError:
                    print(f"Помилка при конвертації оцінки для студента {ім_я}. Пропускаємо запис.")
        
        # Закриття файлу
        файл.close()
    except FileNotFoundError:
        print(f"Файл для групи {назва_групи} не знайдено.")
    
    return студенти

def записати_у_файл_групи(назва_групи: str, дані_студентів: List[Tuple[str, float]], 
                          каталог_даних: str = КАТАЛОГ_ДАНИХ) -> bool:
    """
    Записує дані студентів у файл групи (перезаписуючи існуючий файл) використовуючи модуль csv.
    
    Args:
        назва_групи: Назва групи
        дані_студентів: Список кортежів (ім'я студента, середній бал)
        каталог_даних: Шлях до каталогу з файлами груп
        
    Returns:
        True, якщо запис успішний, False - інакше
    """
    шлях_до_файлу = os.path.join(каталог_даних, f"{назва_групи}.txt")
    
    try:
        # Відкриття файлу для запису
        файл = open(шлях_до_файлу, 'w', encoding='utf-8', newline='')
        
        # Використання csv.writer з розділювачем ':'
        записувач = csv.writer(файл, delimiter=":")
        
        # Запис даних у файл
        for ім_я, середній_бал in дані_студентів:
            записувач.writerow([ім_я, середній_бал])
            
        # Закриття файлу
        файл.close()
        return True
    except Exception as e:
        print(f"Помилка при записі у файл групи {назва_групи}: {e}")
        return False

def дозаписати_у_файл_групи(назва_групи: str, дані_студентів: List[Tuple[str, float]], 
                           каталог_даних: str = КАТАЛОГ_ДАНИХ) -> bool:
    """
    Дозаписує дані студентів у файл групи використовуючи модуль csv.
    
    Args:
        назва_групи: Назва групи
        дані_студентів: Список кортежів (ім'я студента, середній бал)
        каталог_даних: Шлях до каталогу з файлами груп
        
    Returns:
        True, якщо дозапис успішний, False - інакше
    """
    шлях_до_файлу = os.path.join(каталог_даних, f"{назва_групи}.txt")
    
    # Перевірка, чи існує файл
    if not os.path.exists(шлях_до_файлу):
        print(f"Файл для групи {назва_групи} не знайдено. Створюємо новий файл.")
        return записати_у_файл_групи(назва_групи, дані_студентів, каталог_даних)
    
    try:
        # Відкриття файлу для дозапису
        файл = open(шлях_до_файлу, 'a', encoding='utf-8', newline='')
        
        # Використання csv.writer з розділювачем ':'
        записувач = csv.writer(файл, delimiter=":")
        
        # Дозапис даних у файл
        for ім_я, середній_бал in дані_студентів:
            записувач.writerow([ім_я, середній_бал])
            
        # Закриття файлу
        файл.close()
        return True
    except Exception as e:
        print(f"Помилка при дозаписі у файл групи {назва_групи}: {e}")
        return False

def знайти_файли_груп(каталог_даних: str = КАТАЛОГ_ДАНИХ) -> List[str]:
    """
    Знаходить всі файли груп у каталозі.
    
    Args:
        каталог_даних: Шлях до каталогу з файлами груп
        
    Returns:
        Список назв файлів груп (без розширення)
    """
    # Перевірка, чи існує каталог
    if not os.path.exists(каталог_даних):
        print(f"Каталог {каталог_даних} не знайдено.")
        return []
    
    # Отримання списку файлів з розширенням .txt
    файли = [f for f in os.listdir(каталог_даних) if f.endswith('.txt')]
    
    # Видалення розширення .txt
    групи = [os.path.splitext(f)[0] for f in файли]
    
    return групи

def шукати_студента_у_групі(назва_групи: str, ім_я_студента: str, 
                           каталог_даних: str = КАТАЛОГ_ДАНИХ) -> List[Tuple[str, float]]:
    """
    Шукає студента у файлі групи.
    
    Args:
        назва_групи: Назва групи
        ім_я_студента: Ім'я студента для пошуку (може бути частиною імені)
        каталог_даних: Шлях до каталогу з файлами груп
        
    Returns:
        Список кортежів (ім'я студента, середній бал) для знайдених студентів
    """
    # Отримання даних з файлу групи
    студенти = читати_файл_групи(назва_групи, каталог_даних)
    
    # Пошук студентів, чиє ім'я містить шуканий текст
    знайдені_студенти = []
    шаблон = re.compile(ім_я_студента, re.IGNORECASE)
    
    for ім_я, середній_бал in студенти:
        if шаблон.search(ім_я):
            знайдені_студенти.append((ім_я, середній_бал))
    
    return знайдені_студенти

def шукати_студента_у_всіх_групах(ім_я_студента: str, 
                                 каталог_даних: str = КАТАЛОГ_ДАНИХ) -> Dict[str, List[Tuple[str, float]]]:
    """
    Шукає студента у всіх групах.
    
    Args:
        ім_я_студента: Ім'я студента для пошуку (може бути частиною імені)
        каталог_даних: Шлях до каталогу з файлами груп
        
    Returns:
        Словник {назва_групи: [(ім'я_студента, середній_бал), ...]}
    """
    результати = {}
    
    # Отримання списку груп
    групи = знайти_файли_груп(каталог_даних)
    
    # Пошук студента у кожній групі
    for група in групи:
        знайдені_студенти = шукати_студента_у_групі(група, ім_я_студента, каталог_даних)
        if знайдені_студенти:
            результати[група] = знайдені_студенти
    
    return результати

def сортувати_групу_за_середнім_балом(назва_групи: str, за_зростанням: bool = True, 
                                     каталог_даних: str = КАТАЛОГ_ДАНИХ) -> List[Tuple[str, float]]:
    """
    Сортує дані у файлі групи за середнім балом використовуючи модуль csv.
    
    Args:
        назва_групи: Назва групи
        за_зростанням: Якщо True, сортування за зростанням, інакше - за спаданням
        каталог_даних: Шлях до каталогу з файлами груп
        
    Returns:
        Відсортований список кортежів (ім'я студента, середній бал)
    """
    # Отримання даних з файлу групи
    студенти = читати_файл_групи(назва_групи, каталог_даних)
    
    # Сортування за середнім балом
    відсортовані_студенти = sorted(студенти, key=lambda x: x[1], reverse=not за_зростанням)
    
    # Запис відсортованих даних у файл
    шлях_до_файлу = os.path.join(каталог_даних, f"{назва_групи}.txt")
    
    # Відкриття файлу для запису
    файл = open(шлях_до_файлу, 'w', encoding='utf-8', newline='')
    
    # Використання csv.writer з розділювачем ':'
    записувач = csv.writer(файл, delimiter=":")
    
    # Запис відсортованих даних у файл
    for ім_я, середній_бал in відсортовані_студенти:
        записувач.writerow([ім_я, середній_бал])
        
    # Закриття файлу
    файл.close()
    
    return відсортовані_студенти

def головна():
    """
    Демонстрація роботи програми з файлами студентів.
    """
    # Шлях до директорії з файлами груп
    каталог_даних = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'students_data')
    
    # 1. Читання файлів
    print("\n1. Читання даних з файлів груп:")
    for назва_групи in знайти_файли_груп(каталог_даних):
        студенти = читати_файл_групи(назва_групи, каталог_даних)
        print(f"\nГрупа {назва_групи}:")
        for ім_я, середній_бал in студенти:
            print(f"  {ім_я}: {середній_бал}")
    
    # 2. Запис у файл
    print("\n2. Запис нових даних у файл Групи_А:")
    нові_дані = [
        ('Шевченко Олександр', 4.6),
        ('Коваленко Наталія', 4.8),
        ('Бойко Василь', 4.3)
    ]
    if записати_у_файл_групи('Група_А', нові_дані, каталог_даних):
        print("Дані успішно записано у файл Групи_А")
    
    # Перевірка запису
    print("\nДані Групи_А після запису:")
    студенти = читати_файл_групи('Група_А', каталог_даних)
    for ім_я, середній_бал in студенти:
        print(f"  {ім_я}: {середній_бал}")
    
    # 3. Дозапис у файл
    print("\n3. Дозапис нових студентів до Групи_А:")
    додаткові_студенти = [('Мельник Оксана', 4.7), ('Бондаренко Олег', 4.0)]
    if дозаписати_у_файл_групи('Група_А', додаткові_студенти, каталог_даних):
        print("Студентів успішно додано.")
    
    # Перевірка дозапису
    print("\nДані Групи_А після дозапису:")
    студенти = читати_файл_групи('Група_А', каталог_даних)
    for ім_я, середній_бал in студенти:
        print(f"  {ім_я}: {середній_бал}")
    
    # 4. Пошук файлів у каталозі
    print("\n4. Пошук файлів у каталозі:")
    файли_груп = знайти_файли_груп(каталог_даних)
    for назва_групи in файли_груп:
        шлях_до_файлу = os.path.join(каталог_даних, f"{назва_групи}.txt")
        розмір_файлу = os.path.getsize(шлях_до_файлу)
        print(f"- {назва_групи}.txt - {розмір_файлу} байтів")
    
    # 5. Пошук даних у файлі
    print("\n5. Пошук студентів з іменем 'Василь':")
    результати = шукати_студента_у_всіх_групах('Василь', каталог_даних)
    if результати:
        for назва_групи, знайдені_студенти in результати.items():
            print(f"Група {назва_групи}:")
            for ім_я, середній_бал in знайдені_студенти:
                print(f"  {ім_я}: {середній_бал}")
    else:
        print("Студентів з іменем 'Василь' не знайдено.")
    
    # 6. Сортування даних у файлі за середнім балом
    print("\n6. Сортування Групи_А за середнім балом (за спаданням):")
    відсортовані_студенти = сортувати_групу_за_середнім_балом('Група_А', за_зростанням=False, каталог_даних=каталог_даних)
    for ім_я, середній_бал in відсортовані_студенти:
        print(f"  {ім_я}: {середній_бал}")
    
    print("\nДемонстрація завершена.")


if __name__ == "__main__":
    головна()
